@{
    ViewData["Title"] = "Data Protection API Testing - .NET 9";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    var antiforgeryToken = Xsrf.GetAndStoreTokens(Context).RequestToken;
}

<div class="container-fluid fade-in">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-lg border-0 data-protection-card">
                <div class="card-header bg-gradient text-white">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-shield-alt"></i> Data Protection API Testing (.NET 9)
                    </h3>
                    <small>Azure Storage + Múltiples Protectores</small>
                </div>
                <div class="card-body">
                    <!-- Status Panel -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="alert alert-info">
                                <h5><i class="fas fa-info-circle"></i> Estado del Sistema</h5>
                                <div id="systemStatus">
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Verificando configuración...</span>
                                    </div>
                                    <span class="ms-2">Verificando configuración del sistema...</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Storage Selection Panel -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="card border-primary">
                                <div class="card-header bg-primary text-white">
                                    <h5><i class="fas fa-database"></i> Configuración de Almacenamiento</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row align-items-center">
                                        <div class="col-md-8">
                                            <div class="d-flex align-items-center">
                                                <span class="me-3">
                                                    <i class="fas fa-folder text-warning"></i>
                                                    <strong>Local</strong>
                                                </span>
                                                
                                                <!-- Toggle Switch -->
                                                <div class="storage-switch-container me-3">
                                                    <input type="checkbox" id="storageToggle" class="storage-switch" checked>
                                                    <label for="storageToggle" class="storage-switch-label">
                                                        <span class="storage-switch-inner"></span>
                                                        <span class="storage-switch-switch"></span>
                                                    </label>
                                                </div>
                                                
                                                <span>
                                                    <i class="fas fa-cloud text-primary"></i>
                                                    <strong>Azure Storage</strong>
                                                </span>
                                            </div>
                                            <div class="mt-2">
                                                <small id="storageDescription" class="text-muted">
                                                    Usando Azure Blob Storage para persistencia enterprise
                                                </small>
                                            </div>
                                        </div>
                                        <div class="col-md-4 text-end">
                                            <div class="d-flex align-items-center justify-content-end">
                                                <button onclick="checkAzureStorage()" class="btn btn-sm btn-outline-info me-2" title="Verificar estado de Azure Storage">
                                                    <i class="fas fa-search"></i> Verificar
                                                </button>
                                                <div id="storageStatus" class="badge bg-success">
                                                    <i class="fas fa-check-circle"></i> Azure Storage Activo
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Data Protection Testing -->
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="card border-success h-100">
                                <div class="card-header bg-success text-white">
                                    <h5><i class="fas fa-lock"></i> Data Protection API Testing</h5>
                                </div>
                                <div class="card-body">
                                    <form id="dataProtectionForm">
                                        <div class="mb-3">
                                            <label for="inputData" class="form-label">
                                                <i class="fas fa-key"></i> Datos a Proteger:
                                            </label>
                                            <textarea class="form-control" id="inputData" rows="4" 
                                                placeholder="Ingrese datos sensibles para proteger..."></textarea>
                                        </div>
                                        <div class="mb-3">
                                            <label for="purpose" class="form-label">
                                                <i class="fas fa-tag"></i> Propósito de Protección:
                                            </label>
                                            <select class="form-select" id="purpose">
                                                <option value="UserData.Personal.v1">Información Personal</option>
                                                <option value="UserData.Financial.v1">Datos Financieros</option>
                                                <option value="UserData.Medical.v1">Información Médica</option>
                                                <option value="UserData.Custom.v1">Propósito Personalizado</option>
                                            </select>
                                        </div>
                                        <div class="d-grid gap-2 d-md-flex">
                                            <button type="button" class="btn btn-success" onclick="testProtection()">
                                                <i class="fas fa-shield-alt"></i> Probar Protección
                                            </button>
                                            <button type="button" class="btn btn-info" onclick="runDiagnostics()">
                                                <i class="fas fa-stethoscope"></i> Diagnóstico
                                            </button>
                                            <button type="button" class="btn btn-secondary" onclick="clearForm()">
                                                <i class="fas fa-eraser"></i> Limpiar
                                            </button>
                                        </div>
                                        
                                        <div class="mt-3">
                                            <a href="@Url.Action("CrossProtection", "DataProtectionTest")" class="btn btn-warning btn-sm">
                                                <i class="fas fa-question-circle"></i> ¿Por Qué 4 Tipos? - Ver Demostración
                                            </a>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>

                        <!-- Results Panel -->
                        <div class="col-lg-6">
                            <div class="card border-info h-100">
                                <div class="card-header bg-info text-white">
                                    <h5><i class="fas fa-chart-bar"></i> Resultados de Testing</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">
                                            <i class="fas fa-file-text"></i> Datos Originales:
                                        </label>
                                        <textarea class="form-control" id="originalData" rows="2" readonly 
                                            placeholder="Los datos originales aparecerán aquí..."></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">
                                            <i class="fas fa-lock"></i> Datos Protegidos:
                                        </label>
                                        <textarea class="form-control" id="protectedData" rows="3" readonly 
                                            placeholder="Los datos protegidos aparecerán aquí..."></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">
                                            <i class="fas fa-unlock"></i> Datos Desprotegidos:
                                        </label>
                                        <textarea class="form-control" id="unprotectedData" rows="2" readonly 
                                            placeholder="Los datos desprotegidos aparecerán aquí..."></textarea>
                                    </div>
                                    <div class="row">
                                        <div class="col-6">
                                            <div class="card bg-light">
                                                <div class="card-body text-center">
                                                    <h6><i class="fas fa-ruler"></i> Tamaño Original</h6>
                                                    <span id="originalLength" class="badge bg-primary">0 bytes</span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="card bg-light">
                                                <div class="card-body text-center">
                                                    <h6><i class="fas fa-shield"></i> Tamaño Protegido</h6>
                                                    <span id="protectedLength" class="badge bg-success">0 bytes</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Test Results -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="card border-warning">
                                <div class="card-header bg-warning text-dark">
                                    <h5><i class="fas fa-clipboard-list"></i> Logs y Resultados</h5>
                                </div>
                                <div class="card-body">
                                    <div id="testResults">
                                        <div class="alert alert-secondary">
                                            <i class="fas fa-info-circle"></i> Los resultados de las operaciones aparecerán aquí...
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Variables globales
    let currentProtectedData = '';

    // Función de inicialización
    document.addEventListener('DOMContentLoaded', function() {
        console.log('✅ Página cargada correctamente');
        console.log('✅ Data Protection API Testing inicializado');
        
        // Verificar elementos críticos
        const inputData = document.getElementById('inputData');
        const purpose = document.getElementById('purpose');
        const protectButton = document.querySelector('button[onclick="testProtection()"]');
        
        console.log('📋 Elementos encontrados:');
        console.log('- Input data:', inputData ? '✅' : '❌');
        console.log('- Purpose select:', purpose ? '✅' : '❌');  
        console.log('- Protect button:', protectButton ? '✅' : '❌');
        
        // Verificar endpoints
        console.log('🔗 Endpoints configurados:');
        console.log('- TestProtection URL:', '@Url.Action("TestProtection", "DataProtectionTest")');
        console.log('- CheckAzureStorage URL:', '@Url.Action("CheckAzureStorage", "DataProtectionTest")');
        console.log('- ChangeStorageType URL:', '@Url.Action("ChangeStorageType", "DataProtectionTest")');
        
        initializeStorageToggle();
        checkSystemStatus();
    });

    // Verificar estado del sistema
    async function checkSystemStatus() {
        try {
            const statusDiv = document.getElementById('systemStatus');
            
            let statusHtml = '<div class="row">';
            statusHtml += '<div class="col-md-4"><strong>Data Protection:</strong> <span class="protection-status success">Configurado</span></div>';
            statusHtml += '<div class="col-md-4"><strong>Azure Storage:</strong> <span class="protection-status success">Conectado</span></div>';
            statusHtml += '<div class="col-md-4"><strong>Framework:</strong> <span class="badge bg-primary">.NET 9</span></div>';
            statusHtml += '</div>';
            
            statusDiv.innerHTML = statusHtml;
            
        } catch (error) {
            console.error('Error checking system status:', error);
            document.getElementById('systemStatus').innerHTML = 
                '<div class="text-danger"><i class="fas fa-exclamation-triangle"></i> Error verificando configuración</div>';
        }
    }

    // Probar protección de datos
    async function testProtection() {
        const data = document.getElementById('inputData').value;
        const purpose = document.getElementById('purpose').value;
        
        if (!data.trim()) {
            showResult('error', 'Por favor ingrese datos para proteger');
            return;
        }

        try {
            showResult('info', 'Protegiendo datos...');
            
            const requestData = {
                Data: data,
                Purpose: purpose
            };

            console.log('Enviando request:', requestData);

            const response = await fetch('@Url.Action("TestProtection", "DataProtectionTest")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(requestData)
            });

            console.log('Response status:', response.status);
            console.log('Response headers:', response.headers);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const responseText = await response.text();
            console.log('Response text:', responseText);

            let result;
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                console.error('JSON parse error:', parseError);
                throw new Error(`Error parsing JSON response: ${parseError.message}`);
            }

            console.log('Parsed result:', result);
            
            if (result && result.success === true) {
                // Validar que tenemos todos los datos necesarios
                if (!result.originalData || !result.protectedData || !result.unprotectedData) {
                    throw new Error('Respuesta incompleta del servidor');
                }

                // Mostrar resultados
                document.getElementById('originalData').value = result.originalData || '';
                document.getElementById('protectedData').value = result.protectedData || '';
                document.getElementById('unprotectedData').value = result.unprotectedData || '';
                document.getElementById('originalLength').textContent = (result.originalLength || 0) + ' bytes';
                document.getElementById('protectedLength').textContent = (result.protectedLength || 0) + ' bytes';
                
                currentProtectedData = result.protectedData || '';
                
                showResult('success', 'Datos protegidos exitosamente');
                
                // Agregar resultado detallado
                const originalLen = result.originalLength || 0;
                const protectedLen = result.protectedLength || 0;
                const increment = originalLen > 0 ? ((protectedLen - originalLen) / originalLen * 100).toFixed(1) : '0';
                
                addTestResult('success', `
                    <strong>Protección Exitosa</strong><br>
                    <small>Propósito: ${purpose}</small><br>
                    <small>Datos originales: ${originalLen} bytes</small><br>
                    <small>Datos protegidos: ${protectedLen} bytes</small><br>
                    <small>Incremento: ${increment}%</small><br>
                    <small>Tiempo: ${result.testTime || 'N/A'}</small>
                `);
            } else if (result && result.success === false) {
                const errorMsg = result.error || 'Error desconocido en el servidor';
                showResult('error', 'Error: ' + errorMsg);
                addTestResult('error', `<strong>Error en Protección</strong><br><small>${errorMsg}</small>`);
            } else {
                console.error('Unexpected result structure:', result);
                showResult('error', 'Respuesta inesperada del servidor');
                addTestResult('error', `<strong>Error de Protocolo</strong><br><small>Respuesta inesperada del servidor</small>`);
            }
        } catch (error) {
            console.error('Error completo:', error);
            const errorMsg = error.message || 'Error desconocido';
            showResult('error', 'Error de conexión: ' + errorMsg);
            addTestResult('error', `<strong>Error de Conexión</strong><br><small>${errorMsg}</small>`);
        }
    }

    // Limpiar formulario
    function clearForm() {
        document.getElementById('inputData').value = '';
        document.getElementById('originalData').value = '';
        document.getElementById('protectedData').value = '';
        document.getElementById('unprotectedData').value = '';
        document.getElementById('originalLength').textContent = '0 bytes';
        document.getElementById('protectedLength').textContent = '0 bytes';
        currentProtectedData = '';
        
        showResult('info', 'Formulario limpiado');
    }

    // Mostrar resultado
    function showResult(type, message) {
        const resultsDiv = document.getElementById('testResults');
        const alertClass = type === 'success' ? 'alert-success' : 
                          type === 'error' ? 'alert-danger' : 
                          type === 'warning' ? 'alert-warning' : 'alert-info';
        
        const alertHtml = `
            <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                <i class="fas fa-${type === 'success' ? 'check-circle' : 
                                   type === 'error' ? 'exclamation-triangle' : 
                                   type === 'warning' ? 'exclamation-circle' : 'info-circle'}"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        resultsDiv.innerHTML = alertHtml + resultsDiv.innerHTML;
    }

    // Agregar resultado de test
    function addTestResult(type, content) {
        const resultsDiv = document.getElementById('testResults');
        const resultClass = type === 'success' ? 'test-result success' : 'test-result error';
        
        const resultHtml = `
            <div class="${resultClass}">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        ${content}
                    </div>
                    <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                </div>
            </div>
        `;
        
        resultsDiv.innerHTML = resultHtml + resultsDiv.innerHTML;
    }

    // Inicializar el toggle de almacenamiento
    function initializeStorageToggle() {
        const toggleSwitch = document.getElementById('storageToggle');
        const storageStatus = document.getElementById('storageStatus');
        const storageDescription = document.getElementById('storageDescription');

        // Event listener para el cambio de toggle
        toggleSwitch.addEventListener('change', async function() {
            const useAzureStorage = this.checked;
            
            try {
                showResult('info', 'Guardando preferencia de almacenamiento...');
                
                const response = await fetch('@Url.Action("ChangeStorageType", "DataProtectionTest")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'RequestVerificationToken': '@antiforgeryToken'
                    },
                    body: JSON.stringify({
                        UseAzureStorage: useAzureStorage
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    // Actualizar UI
                    updateStorageUI(result.isAzure, result.storageType, result.description);
                    
                    // Mostrar mensaje con instrucciones de reinicio
                    if (result.requiresRestart) {
                        showResult('warning', `
                            ${result.message}<br>
                            <strong>${result.note}</strong><br>
                            <small>${result.instruction}</small>
                        `);
                        
                        addTestResult('info', `
                            <strong>Configuración de Almacenamiento Cambiada</strong><br>
                            <small>Nuevo tipo: ${result.storageType}</small><br>
                            <small>⚠️ Requiere reinicio para aplicar cambios</small><br>
                            <small>Ejecuta: Ctrl+C y luego 'dotnet run'</small><br>
                            <small>Tiempo: ${new Date().toLocaleTimeString()}</small>
                        `);
                    } else {
                        showResult('success', result.message);
                        addTestResult('success', `
                            <strong>Configuración Actualizada</strong><br>
                            <small>Almacenamiento: ${result.storageType}</small><br>
                            <small>Tiempo: ${new Date().toLocaleTimeString()}</small>
                        `);
                    }
                } else {
                    throw new Error(result.error || 'Error desconocido');
                }
            } catch (error) {
                console.error('Error changing storage type:', error);
                // Revertir el toggle
                this.checked = !useAzureStorage;
                showResult('error', 'Error al cambiar configuración: ' + error.message);
                
                addTestResult('error', `
                    <strong>Error al Cambiar Configuración</strong><br>
                    <small>Error: ${error.message}</small><br>
                    <small>Tiempo: ${new Date().toLocaleTimeString()}</small>
                `);
            }
        });

        // Inicializar estado
        updateStorageUI(true, 'Azure Storage', 'Usando Azure Blob Storage para persistencia enterprise');
    }

    // Actualizar la UI del storage
    function updateStorageUI(isAzure, storageType, description) {
        const storageStatus = document.getElementById('storageStatus');
        const storageDescription = document.getElementById('storageDescription');

        if (isAzure) {
            storageStatus.className = 'badge bg-success';
            storageStatus.innerHTML = '<i class="fas fa-cloud"></i> Azure Storage Activo';
        } else {
            storageStatus.className = 'badge bg-warning';
            storageStatus.innerHTML = '<i class="fas fa-folder"></i> Local Storage Activo';
        }

        storageDescription.textContent = description;
    }

    // Verificar estado de Azure Storage
    async function checkAzureStorage() {
        try {
            showResult('info', 'Verificando estado de Azure Storage...');
            
            const response = await fetch('@Url.Action("CheckAzureStorage", "DataProtectionTest")', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.success) {
                // Mostrar información detallada
                let statusHtml = '<div class="azure-storage-info">';
                statusHtml += `<h6><i class="fas fa-cloud"></i> Estado de Azure Storage</h6>`;
                statusHtml += `<p><strong>Storage Account:</strong> ${result.storageAccount}</p>`;
                statusHtml += `<p><strong>Container:</strong> ${result.containerName}</p>`;
                
                if (result.containerExists === false) {
                    statusHtml += '<p class="text-warning"><i class="fas fa-exclamation-triangle"></i> Container aún no existe</p>';
                } else if (result.blobExists === false) {
                    statusHtml += '<p class="text-info"><i class="fas fa-info-circle"></i> Container existe, pero no hay claves aún</p>';
                } else {
                    statusHtml += `<p><strong>Blob:</strong> ${result.blobName}</p>`;
                    statusHtml += `<p><strong>Última modificación:</strong> ${result.lastModified}</p>`;
                    statusHtml += `<p><strong>Tamaño:</strong> ${result.sizeBytes} bytes</p>`;
                    statusHtml += `<p><strong>Número de claves:</strong> ${result.keyCount}</p>`;
                    
                    if (result.xmlPreview) {
                        statusHtml += `<details class="mt-2">`;
                        statusHtml += `<summary><small>Ver contenido XML (preview)</small></summary>`;
                        statusHtml += `<pre class="text-small mt-1" style="font-size: 10px; max-height: 100px; overflow-y: auto;">${result.xmlPreview}</pre>`;
                        statusHtml += `</details>`;
                    }
                }
                
                statusHtml += `<p class="text-success mt-2"><strong>${result.message}</strong></p>`;
                statusHtml += '</div>';
                
                showResult('success', statusHtml);
                
                addTestResult('info', `
                    <strong>Verificación Azure Storage</strong><br>
                    <small>Storage: ${result.storageAccount}</small><br>
                    <small>Container existe: ${result.containerExists ? 'Sí' : 'No'}</small><br>
                    <small>Claves: ${result.keyCount || 0}</small><br>
                    <small>Tiempo: ${new Date().toLocaleTimeString()}</small>
                `);
                
            } else {
                // Error o configuración local
                let errorMsg = result.error || 'Error desconocido';
                if (result.storageType === 'Local') {
                    errorMsg = 'Aplicación configurada para almacenamiento local';
                }
                
                showResult('warning', `⚠️ ${errorMsg}`);
                addTestResult('warning', `
                    <strong>Azure Storage No Disponible</strong><br>
                    <small>Motivo: ${errorMsg}</small><br>
                    <small>Tiempo: ${new Date().toLocaleTimeString()}</small>
                `);
            }
            
        } catch (error) {
            console.error('Error checking Azure Storage:', error);
            showResult('error', 'Error verificando Azure Storage: ' + error.message);
            addTestResult('error', `
                <strong>Error de Verificación</strong><br>
                <small>Error: ${error.message}</small><br>
                <small>Tiempo: ${new Date().toLocaleTimeString()}</small>
            `);
        }
    }

    // Función de diagnóstico
    async function runDiagnostics() {
        try {
            showResult('info', 'Ejecutando diagnóstico del sistema...');
            console.log('🔧 Iniciando diagnóstico completo');
            
            // Test 1: Verificar conectividad con el controlador
            console.log('📋 Test 1: Conectividad del controlador');
            const response = await fetch('@Url.Action("Diagnostics", "DataProtectionTest")', {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            console.log('📊 Resultado del diagnóstico:', result);
            
            if (result.success) {
                let diagnosticHtml = '<div class="diagnostic-results">';
                diagnosticHtml += '<h6><i class="fas fa-check-circle text-success"></i> Diagnóstico del Sistema</h6>';
                diagnosticHtml += `<p><strong>Estado:</strong> <span class="text-success">Funcionando correctamente</span></p>`;
                diagnosticHtml += `<p><strong>Timestamp:</strong> ${result.timestamp}</p>`;
                diagnosticHtml += `<p><strong>Aplicación:</strong> ${result.applicationName}</p>`;
                diagnosticHtml += `<p><strong>Azure Storage:</strong> ${result.hasStorageConnection ? 'Configurado' : 'No configurado'}</p>`;
                diagnosticHtml += '</div>';
                
                showResult('success', diagnosticHtml);
                
                // Test 2: Probar protección simple
                console.log('📋 Test 2: Protección de datos simple');
                await testSimpleProtection();
                
            } else {
                showResult('error', `Error en diagnóstico: ${result.error}`);
            }
            
        } catch (error) {
            console.error('❌ Error en diagnóstico:', error);
            showResult('error', `Error ejecutando diagnóstico: ${error.message}`);
            
            addTestResult('error', `
                <strong>Error de Diagnóstico</strong><br>
                <small>Error: ${error.message}</small><br>
                <small>Tiempo: ${new Date().toLocaleTimeString()}</small>
            `);
        }
    }
    
    // Test simple de protección
    async function testSimpleProtection() {
        try {
            console.log('🔒 Probando protección de datos...');
            
            const testData = {
                Data: "Test de diagnóstico - " + new Date().getTime(),
                Purpose: "UserData.Personal.v1"
            };
            
            const response = await fetch('@Url.Action("TestProtection", "DataProtectionTest")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(testData)
            });
            
            console.log('📊 Response status:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const result = await response.json();
            console.log('📊 Test protection result:', result);
            
            if (result.success) {
                addTestResult('success', `
                    <strong>✅ Test de Protección Exitoso</strong><br>
                    <small>Datos protegidos y verificados correctamente</small><br>
                    <small>Original: ${result.originalLength} bytes</small><br>
                    <small>Protegido: ${result.protectedLength} bytes</small><br>
                    <small>Tiempo: ${new Date().toLocaleTimeString()}</small>
                `);
                
                showResult('success', '✅ Diagnóstico completo: Todo funciona correctamente');
            } else {
                throw new Error(result.error || 'Error desconocido en protección');
            }
            
        } catch (error) {
            console.error('❌ Error en test de protección:', error);
            addTestResult('error', `
                <strong>❌ Error en Test de Protección</strong><br>
                <small>Error: ${error.message}</small><br>
                <small>Tiempo: ${new Date().toLocaleTimeString()}</small>
            `);
            throw error;
        }
    }
</script>
} 