@{
    ViewData["Title"] = "Data Protection API Testing - .NET 9";
}

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    var antiforgeryToken = Xsrf.GetAndStoreTokens(Context).RequestToken;
}

<div class="container-fluid fade-in">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-lg border-0 data-protection-card">
                <div class="card-header bg-gradient text-white">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-shield-alt"></i> Data Protection API Testing (.NET 9)
                    </h3>
                    <small>Azure Storage + Múltiples Protectores</small>
                </div>
                <div class="card-body">
                    <!-- Status Panel -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="alert alert-info">
                                <h5><i class="fas fa-info-circle"></i> Estado del Sistema</h5>
                                <div id="systemStatus">
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Verificando configuración...</span>
                                    </div>
                                    <span class="ms-2">Verificando configuración del sistema...</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Storage Selection Panel -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="card border-primary">
                                <div class="card-header bg-primary text-white">
                                    <h5><i class="fas fa-database"></i> Configuración de Almacenamiento</h5>
                                </div>
                                <div class="card-body">
                                    <div class="row align-items-center">
                                        <div class="col-md-8">
                                            <div class="d-flex align-items-center">
                                                <span class="me-3">
                                                    <i class="fas fa-folder text-warning"></i>
                                                    <strong>Local</strong>
                                                </span>
                                                
                                                <!-- Toggle Switch -->
                                                <div class="storage-switch-container me-3">
                                                    <input type="checkbox" id="storageToggle" class="storage-switch" checked>
                                                    <label for="storageToggle" class="storage-switch-label">
                                                        <span class="storage-switch-inner"></span>
                                                        <span class="storage-switch-switch"></span>
                                                    </label>
                                                </div>
                                                
                                                <span>
                                                    <i class="fas fa-cloud text-primary"></i>
                                                    <strong>Azure Storage</strong>
                                                </span>
                                            </div>
                                            <div class="mt-2">
                                                <small id="storageDescription" class="text-muted">
                                                    Usando Azure Blob Storage para persistencia enterprise
                                                </small>
                                            </div>
                                        </div>
                                        <div class="col-md-4 text-end">
                                            <div id="storageStatus" class="badge bg-success">
                                                <i class="fas fa-check-circle"></i> Azure Storage Activo
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Data Protection Testing -->
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="card border-success h-100">
                                <div class="card-header bg-success text-white">
                                    <h5><i class="fas fa-lock"></i> Data Protection API Testing</h5>
                                </div>
                                <div class="card-body">
                                    <form id="dataProtectionForm">
                                        <div class="mb-3">
                                            <label for="inputData" class="form-label">
                                                <i class="fas fa-key"></i> Datos a Proteger:
                                            </label>
                                            <textarea class="form-control" id="inputData" rows="4" 
                                                placeholder="Ingrese datos sensibles para proteger..."></textarea>
                                        </div>
                                        <div class="mb-3">
                                            <label for="purpose" class="form-label">
                                                <i class="fas fa-tag"></i> Propósito de Protección:
                                            </label>
                                            <select class="form-select" id="purpose">
                                                <option value="UserData.Personal.v1">Información Personal</option>
                                                <option value="UserData.Financial.v1">Datos Financieros</option>
                                                <option value="UserData.Medical.v1">Información Médica</option>
                                                <option value="UserData.Custom.v1">Propósito Personalizado</option>
                                            </select>
                                        </div>
                                        <div class="d-grid gap-2 d-md-flex">
                                            <button type="button" class="btn btn-success" onclick="testProtection()">
                                                <i class="fas fa-shield-alt"></i> Probar Protección
                                            </button>
                                            <button type="button" class="btn btn-secondary" onclick="clearForm()">
                                                <i class="fas fa-eraser"></i> Limpiar
                                            </button>
                                        </div>
                                        
                                        <div class="mt-3">
                                            <a href="@Url.Action("CrossProtection", "DataProtectionTest")" class="btn btn-warning btn-sm">
                                                <i class="fas fa-question-circle"></i> ¿Por Qué 4 Tipos? - Ver Demostración
                                            </a>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>

                        <!-- Results Panel -->
                        <div class="col-lg-6">
                            <div class="card border-info h-100">
                                <div class="card-header bg-info text-white">
                                    <h5><i class="fas fa-chart-bar"></i> Resultados de Testing</h5>
                                </div>
                                <div class="card-body">
                                    <div class="mb-3">
                                        <label class="form-label">
                                            <i class="fas fa-file-text"></i> Datos Originales:
                                        </label>
                                        <textarea class="form-control" id="originalData" rows="2" readonly 
                                            placeholder="Los datos originales aparecerán aquí..."></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">
                                            <i class="fas fa-lock"></i> Datos Protegidos:
                                        </label>
                                        <textarea class="form-control" id="protectedData" rows="3" readonly 
                                            placeholder="Los datos protegidos aparecerán aquí..."></textarea>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">
                                            <i class="fas fa-unlock"></i> Datos Desprotegidos:
                                        </label>
                                        <textarea class="form-control" id="unprotectedData" rows="2" readonly 
                                            placeholder="Los datos desprotegidos aparecerán aquí..."></textarea>
                                    </div>
                                    <div class="row">
                                        <div class="col-6">
                                            <div class="card bg-light">
                                                <div class="card-body text-center">
                                                    <h6><i class="fas fa-ruler"></i> Tamaño Original</h6>
                                                    <span id="originalLength" class="badge bg-primary">0 bytes</span>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="card bg-light">
                                                <div class="card-body text-center">
                                                    <h6><i class="fas fa-shield"></i> Tamaño Protegido</h6>
                                                    <span id="protectedLength" class="badge bg-success">0 bytes</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Test Results -->
                    <div class="row mt-4">
                        <div class="col-12">
                            <div class="card border-warning">
                                <div class="card-header bg-warning text-dark">
                                    <h5><i class="fas fa-clipboard-list"></i> Logs y Resultados</h5>
                                </div>
                                <div class="card-body">
                                    <div id="testResults">
                                        <div class="alert alert-secondary">
                                            <i class="fas fa-info-circle"></i> Los resultados de las operaciones aparecerán aquí...
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Variables globales
    let currentProtectedData = '';

    // Inicialización al cargar la página
    document.addEventListener('DOMContentLoaded', function() {
        checkSystemStatus();
        initializeStorageToggle();
    });

    // Verificar estado del sistema
    async function checkSystemStatus() {
        try {
            const statusDiv = document.getElementById('systemStatus');
            
            let statusHtml = '<div class="row">';
            statusHtml += '<div class="col-md-4"><strong>Data Protection:</strong> <span class="protection-status success">Configurado</span></div>';
            statusHtml += '<div class="col-md-4"><strong>Azure Storage:</strong> <span class="protection-status success">Conectado</span></div>';
            statusHtml += '<div class="col-md-4"><strong>Framework:</strong> <span class="badge bg-primary">.NET 9</span></div>';
            statusHtml += '</div>';
            
            statusDiv.innerHTML = statusHtml;
            
        } catch (error) {
            console.error('Error checking system status:', error);
            document.getElementById('systemStatus').innerHTML = 
                '<div class="text-danger"><i class="fas fa-exclamation-triangle"></i> Error verificando configuración</div>';
        }
    }

    // Probar protección de datos
    async function testProtection() {
        const data = document.getElementById('inputData').value;
        const purpose = document.getElementById('purpose').value;
        
        if (!data.trim()) {
            showResult('error', 'Por favor ingrese datos para proteger');
            return;
        }

        try {
            showResult('info', 'Protegiendo datos...');
            
            const requestData = {
                Data: data,
                Purpose: purpose
            };

            console.log('Enviando request:', requestData);

            const response = await fetch('@Url.Action("TestProtection", "DataProtectionTest")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'RequestVerificationToken': '@antiforgeryToken'
                },
                body: JSON.stringify(requestData)
            });

            console.log('Response status:', response.status);
            console.log('Response headers:', response.headers);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const responseText = await response.text();
            console.log('Response text:', responseText);

            let result;
            try {
                result = JSON.parse(responseText);
            } catch (parseError) {
                console.error('JSON parse error:', parseError);
                throw new Error(`Error parsing JSON response: ${parseError.message}`);
            }

            console.log('Parsed result:', result);
            
            if (result && result.success === true) {
                // Validar que tenemos todos los datos necesarios
                if (!result.originalData || !result.protectedData || !result.unprotectedData) {
                    throw new Error('Respuesta incompleta del servidor');
                }

                // Mostrar resultados
                document.getElementById('originalData').value = result.originalData || '';
                document.getElementById('protectedData').value = result.protectedData || '';
                document.getElementById('unprotectedData').value = result.unprotectedData || '';
                document.getElementById('originalLength').textContent = (result.originalLength || 0) + ' bytes';
                document.getElementById('protectedLength').textContent = (result.protectedLength || 0) + ' bytes';
                
                currentProtectedData = result.protectedData || '';
                
                showResult('success', 'Datos protegidos exitosamente');
                
                // Agregar resultado detallado
                const originalLen = result.originalLength || 0;
                const protectedLen = result.protectedLength || 0;
                const increment = originalLen > 0 ? ((protectedLen - originalLen) / originalLen * 100).toFixed(1) : '0';
                
                addTestResult('success', `
                    <strong>Protección Exitosa</strong><br>
                    <small>Propósito: ${purpose}</small><br>
                    <small>Datos originales: ${originalLen} bytes</small><br>
                    <small>Datos protegidos: ${protectedLen} bytes</small><br>
                    <small>Incremento: ${increment}%</small><br>
                    <small>Tiempo: ${result.testTime || 'N/A'}</small>
                `);
            } else if (result && result.success === false) {
                const errorMsg = result.error || 'Error desconocido en el servidor';
                showResult('error', 'Error: ' + errorMsg);
                addTestResult('error', `<strong>Error en Protección</strong><br><small>${errorMsg}</small>`);
            } else {
                console.error('Unexpected result structure:', result);
                showResult('error', 'Respuesta inesperada del servidor');
                addTestResult('error', `<strong>Error de Protocolo</strong><br><small>Respuesta inesperada del servidor</small>`);
            }
        } catch (error) {
            console.error('Error completo:', error);
            const errorMsg = error.message || 'Error desconocido';
            showResult('error', 'Error de conexión: ' + errorMsg);
            addTestResult('error', `<strong>Error de Conexión</strong><br><small>${errorMsg}</small>`);
        }
    }

    // Limpiar formulario
    function clearForm() {
        document.getElementById('inputData').value = '';
        document.getElementById('originalData').value = '';
        document.getElementById('protectedData').value = '';
        document.getElementById('unprotectedData').value = '';
        document.getElementById('originalLength').textContent = '0 bytes';
        document.getElementById('protectedLength').textContent = '0 bytes';
        currentProtectedData = '';
        
        showResult('info', 'Formulario limpiado');
    }

    // Mostrar resultado
    function showResult(type, message) {
        const resultsDiv = document.getElementById('testResults');
        const alertClass = type === 'success' ? 'alert-success' : 
                          type === 'error' ? 'alert-danger' : 
                          type === 'warning' ? 'alert-warning' : 'alert-info';
        
        const alertHtml = `
            <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                <i class="fas fa-${type === 'success' ? 'check-circle' : 
                                   type === 'error' ? 'exclamation-triangle' : 
                                   type === 'warning' ? 'exclamation-circle' : 'info-circle'}"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        resultsDiv.innerHTML = alertHtml + resultsDiv.innerHTML;
    }

    // Agregar resultado de test
    function addTestResult(type, content) {
        const resultsDiv = document.getElementById('testResults');
        const resultClass = type === 'success' ? 'test-result success' : 'test-result error';
        
        const resultHtml = `
            <div class="${resultClass}">
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        ${content}
                    </div>
                    <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                </div>
            </div>
        `;
        
        resultsDiv.innerHTML = resultHtml + resultsDiv.innerHTML;
    }

    // Inicializar el toggle de almacenamiento
    function initializeStorageToggle() {
        const toggleSwitch = document.getElementById('storageToggle');
        const storageStatus = document.getElementById('storageStatus');
        const storageDescription = document.getElementById('storageDescription');

        // Event listener para el cambio de toggle
        toggleSwitch.addEventListener('change', async function() {
            const useAzureStorage = this.checked;
            
            try {
                showResult('info', 'Cambiando configuración de almacenamiento...');
                
                const response = await fetch('@Url.Action("ChangeStorageType", "DataProtectionTest")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'RequestVerificationToken': '@antiforgeryToken'
                    },
                    body: JSON.stringify({
                        UseAzureStorage: useAzureStorage
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const result = await response.json();
                
                if (result.success) {
                    // Actualizar UI
                    updateStorageUI(result.isAzure, result.storageType, result.description);
                    
                    showResult('success', result.message);
                    addTestResult('success', `
                        <strong>Configuración Actualizada</strong><br>
                        <small>Almacenamiento: ${result.storageType}</small><br>
                        <small>Tiempo: ${new Date().toLocaleTimeString()}</small>
                    `);
                } else {
                    throw new Error(result.error || 'Error desconocido');
                }
            } catch (error) {
                console.error('Error changing storage type:', error);
                // Revertir el toggle
                this.checked = !useAzureStorage;
                showResult('error', 'Error al cambiar configuración: ' + error.message);
            }
        });

        // Inicializar estado
        updateStorageUI(true, 'Azure Storage', 'Usando Azure Blob Storage para persistencia enterprise');
    }

    // Actualizar la UI del storage
    function updateStorageUI(isAzure, storageType, description) {
        const storageStatus = document.getElementById('storageStatus');
        const storageDescription = document.getElementById('storageDescription');

        if (isAzure) {
            storageStatus.className = 'badge bg-success';
            storageStatus.innerHTML = '<i class="fas fa-cloud"></i> Azure Storage Activo';
        } else {
            storageStatus.className = 'badge bg-warning';
            storageStatus.innerHTML = '<i class="fas fa-folder"></i> Local Storage Activo';
        }

        storageDescription.textContent = description;
    }
</script>
} 