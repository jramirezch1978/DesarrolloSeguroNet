@{
    ViewData["Title"] = "Gestión Segura de Datos - .NET 9 + Azure Key Vault";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-lg border-0">
                <div class="card-header bg-gradient bg-primary text-white">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-shield-alt"></i> Gestión Segura de Datos (.NET 9)
                    </h3>
                    <small>Data Protection API + Azure Key Vault Integration</small>
                </div>
                <div class="card-body">
                    <!-- Status Panel -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="alert alert-info">
                                <h5><i class="fas fa-info-circle"></i> Estado del Sistema</h5>
                                <div id="systemStatus">
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Verificando configuración...</span>
                                    </div>
                                    <span class="ms-2">Verificando configuración del sistema...</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Data Protection Testing -->
                    <div class="row mb-4">
                        <div class="col-lg-6">
                            <div class="card border-success">
                                <div class="card-header bg-success text-white">
                                    <h5><i class="fas fa-lock"></i> Data Protection API Testing</h5>
                                </div>
                                <div class="card-body">
                                    <form id="dataProtectionForm">
                                        <div class="mb-3">
                                            <label for="inputData" class="form-label">Datos a Proteger:</label>
                                            <textarea class="form-control" id="inputData" rows="3" 
                                                placeholder="Ingrese datos sensibles para proteger..."></textarea>
                                        </div>
                                        <div class="mb-3">
                                            <label for="purpose" class="form-label">Propósito de Protección:</label>
                                            <select class="form-select" id="purpose">
                                                <option value="UserData.Personal.v1">Información Personal</option>
                                                <option value="UserData.Financial.v1">Datos Financieros</option>
                                                <option value="UserData.Medical.v1">Información Médica</option>
                                                <option value="UserData.Custom.v1">Propósito Personalizado</option>
                                            </select>
                                        </div>
                                        <div class="d-grid gap-2 d-md-flex">
                                            <button type="button" class="btn btn-success" onclick="protectData()">
                                                <i class="fas fa-shield-alt"></i> Proteger Datos
                                            </button>
                                            <button type="button" class="btn btn-warning" onclick="unprotectData()">
                                                <i class="fas fa-unlock"></i> Desproteger Datos
                                            </button>
                                            <button type="button" class="btn btn-secondary" onclick="clearDataProtection()">
                                                <i class="fas fa-eraser"></i> Limpiar
                                            </button>
                                        </div>
                                    </form>

                                    <div class="mt-4">
                                        <div class="mb-3">
                                            <label class="form-label">Datos Protegidos:</label>
                                            <textarea class="form-control" id="protectedData" rows="4" readonly 
                                                placeholder="Los datos protegidos aparecerán aquí..."></textarea>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Datos Desprotegidos:</label>
                                            <textarea class="form-control" id="unprotectedData" rows="3" readonly 
                                                placeholder="Los datos desprotegidos aparecerán aquí..."></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Key Vault Management -->
                        <div class="col-lg-6">
                            <div class="card border-warning">
                                <div class="card-header bg-warning text-dark">
                                    <h5><i class="fas fa-key"></i> Azure Key Vault Management</h5>
                                </div>
                                <div class="card-body">
                                    <!-- Create Secret -->
                                    <div class="mb-4">
                                        <h6><i class="fas fa-plus-circle"></i> Crear Nuevo Secret</h6>
                                        <form id="createSecretForm">
                                            <div class="row">
                                                <div class="col-md-6">
                                                    <input type="text" class="form-control" id="secretName" 
                                                        placeholder="Nombre del secret">
                                                </div>
                                                <div class="col-md-6">
                                                    <input type="password" class="form-control" id="secretValue" 
                                                        placeholder="Valor del secret">
                                                </div>
                                            </div>
                                            <div class="mt-2">
                                                <button type="button" class="btn btn-primary btn-sm" onclick="createSecret()">
                                                    <i class="fas fa-save"></i> Crear Secret
                                                </button>
                                            </div>
                                        </form>
                                    </div>

                                    <!-- Load Secrets -->
                                    <div class="mb-3">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h6><i class="fas fa-list"></i> Secrets en Key Vault</h6>
                                            <button class="btn btn-outline-primary btn-sm" onclick="loadKeyVaultSecrets()">
                                                <i class="fas fa-sync-alt"></i> Actualizar
                                            </button>
                                        </div>
                                    </div>

                                    <!-- Secrets List -->
                                    <div id="secretsList">
                                        <div class="text-center text-muted">
                                            <i class="fas fa-info-circle"></i> Click "Actualizar" para cargar secrets
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Configuration Test Results -->
                    <div class="row">
                        <div class="col-12">
                            <div class="card border-info">
                                <div class="card-header bg-info text-white">
                                    <h5><i class="fas fa-cogs"></i> Resultados de Testing y Logs</h5>
                                </div>
                                <div class="card-body">
                                    <div id="testResults">
                                        <div class="alert alert-secondary">
                                            <i class="fas fa-info-circle"></i> Los resultados de las operaciones aparecerán aquí...
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Variables globales
    let systemConfiguration = {};

    // Inicialización al cargar la página
    document.addEventListener('DOMContentLoaded', function() {
        checkSystemConfiguration();
    });

    // Verificar configuración del sistema
    async function checkSystemConfiguration() {
        try {
            const response = await fetch('@Url.Action("TestConfiguration", "SecureData")');
            const config = await response.json();
            systemConfiguration = config;
            
            const statusDiv = document.getElementById('systemStatus');
            
            let statusHtml = '<div class="row">';
            statusHtml += `<div class="col-md-3">
                <strong>Data Protection:</strong> 
                <span class="badge ${config.dataProtectionConfigured ? 'bg-success' : 'bg-danger'}">
                    ${config.dataProtectionConfigured ? 'Configurado' : 'No Configurado'}
                </span>
            </div>`;
            statusHtml += `<div class="col-md-3">
                <strong>Key Vault:</strong> 
                <span class="badge ${config.keyVaultConfigured ? 'bg-success' : 'bg-danger'}">
                    ${config.keyVaultConfigured ? 'Conectado' : 'No Conectado'}
                </span>
            </div>`;
            statusHtml += `<div class="col-md-3">
                <strong>Framework:</strong> 
                <span class="badge bg-primary">.NET ${config.framework}</span>
            </div>`;
            statusHtml += `<div class="col-md-3">
                <strong>Servidor:</strong> 
                <span class="badge bg-secondary">${config.environment}</span>
            </div>`;
            statusHtml += '</div>';
            
            statusDiv.innerHTML = statusHtml;
            
            // Auto-cargar secrets si Key Vault está configurado
            if (config.keyVaultConfigured) {
                setTimeout(loadKeyVaultSecrets, 1000);
            }
            
        } catch (error) {
            console.error('Error checking system configuration:', error);
            document.getElementById('systemStatus').innerHTML = 
                '<div class="text-danger"><i class="fas fa-exclamation-triangle"></i> Error verificando configuración</div>';
        }
    }

    // Proteger datos
    async function protectData() {
        const data = document.getElementById('inputData').value;
        const purpose = document.getElementById('purpose').value;
        
        if (!data.trim()) {
            showResult('error', 'Por favor ingrese datos para proteger');
            return;
        }

        try {
            showResult('info', 'Protegiendo datos...');
            
            const response = await fetch('@Url.Action("ProtectData", "SecureData")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `data=${encodeURIComponent(data)}&purpose=${encodeURIComponent(purpose)}`
            });

            const result = await response.json();
            
            if (result.success) {
                document.getElementById('protectedData').value = result.protectedData;
                showResult('success', 
                    `Datos protegidos exitosamente. Tamaño original: ${result.originalLength} bytes, ` +
                    `Tamaño protegido: ${result.protectedLength} bytes`);
            } else {
                showResult('error', `Error: ${result.error}`);
            }
        } catch (error) {
            console.error('Error protecting data:', error);
            showResult('error', 'Error al proteger datos: ' + error.message);
        }
    }

    // Desproteger datos
    async function unprotectData() {
        const protectedData = document.getElementById('protectedData').value;
        const purpose = document.getElementById('purpose').value;
        
        if (!protectedData.trim()) {
            showResult('error', 'No hay datos protegidos para desproteger');
            return;
        }

        try {
            showResult('info', 'Desprotegiendo datos...');
            
            const response = await fetch('@Url.Action("UnprotectData", "SecureData")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `protectedData=${encodeURIComponent(protectedData)}&purpose=${encodeURIComponent(purpose)}`
            });

            const result = await response.json();
            
            if (result.success) {
                document.getElementById('unprotectedData').value = result.unprotectedData;
                showResult('success', 'Datos desprotegidos exitosamente');
            } else {
                showResult('error', `Error: ${result.error}`);
            }
        } catch (error) {
            console.error('Error unprotecting data:', error);
            showResult('error', 'Error al desproteger datos: ' + error.message);
        }
    }

    // Limpiar formulario de Data Protection
    function clearDataProtection() {
        document.getElementById('inputData').value = '';
        document.getElementById('protectedData').value = '';
        document.getElementById('unprotectedData').value = '';
        showResult('info', 'Formulario limpiado');
    }

    // Cargar secrets de Key Vault
    async function loadKeyVaultSecrets() {
        if (!systemConfiguration.keyVaultConfigured) {
            showResult('error', 'Key Vault no está configurado');
            return;
        }

        try {
            const secretsList = document.getElementById('secretsList');
            secretsList.innerHTML = '<div class="text-center"><div class="spinner-border spinner-border-sm"></div> Cargando secrets...</div>';
            
            const response = await fetch('@Url.Action("GetKeyVaultSecrets", "SecureData")');
            const result = await response.json();
            
            if (result.success) {
                let html = '<div class="table-responsive"><table class="table table-striped table-hover">';
                html += '<thead class="table-dark"><tr><th>Nombre</th><th>Valor</th><th>Acciones</th></tr></thead><tbody>';
                
                for (const [name, value] of Object.entries(result.secrets)) {
                    html += `<tr>
                        <td><code>${name}</code></td>
                        <td><span class="text-muted">${value}</span></td>
                        <td>
                            <button class="btn btn-outline-primary btn-sm" onclick="copyToClipboard('${value}')">
                                <i class="fas fa-copy"></i>
                            </button>
                        </td>
                    </tr>`;
                }
                
                html += '</tbody></table></div>';
                secretsList.innerHTML = html;
                
                showResult('success', `${Object.keys(result.secrets).length} secrets cargados desde Key Vault`);
            } else {
                secretsList.innerHTML = '<div class="alert alert-danger">Error cargando secrets</div>';
                showResult('error', `Error: ${result.error}`);
            }
        } catch (error) {
            console.error('Error loading secrets:', error);
            document.getElementById('secretsList').innerHTML = '<div class="alert alert-danger">Error cargando secrets</div>';
            showResult('error', 'Error al cargar secrets: ' + error.message);
        }
    }

    // Crear nuevo secret
    async function createSecret() {
        const name = document.getElementById('secretName').value;
        const value = document.getElementById('secretValue').value;
        
        if (!name.trim() || !value.trim()) {
            showResult('error', 'Por favor ingrese nombre y valor del secret');
            return;
        }

        try {
            showResult('info', 'Creando secret...');
            
            const response = await fetch('@Url.Action("CreateSecret", "SecureData")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `secretName=${encodeURIComponent(name)}&secretValue=${encodeURIComponent(value)}`
            });

            const result = await response.json();
            
            if (result.success) {
                document.getElementById('secretName').value = '';
                document.getElementById('secretValue').value = '';
                showResult('success', result.message);
                
                // Recargar lista de secrets
                setTimeout(loadKeyVaultSecrets, 1000);
            } else {
                showResult('error', `Error: ${result.error}`);
            }
        } catch (error) {
            console.error('Error creating secret:', error);
            showResult('error', 'Error al crear secret: ' + error.message);
        }
    }

    // Mostrar resultados
    function showResult(type, message) {
        const resultsDiv = document.getElementById('testResults');
        const timestamp = new Date().toLocaleTimeString();
        
        let alertClass = 'alert-secondary';
        let icon = 'fas fa-info-circle';
        
        switch (type) {
            case 'success':
                alertClass = 'alert-success';
                icon = 'fas fa-check-circle';
                break;
            case 'error':
                alertClass = 'alert-danger';
                icon = 'fas fa-exclamation-triangle';
                break;
            case 'warning':
                alertClass = 'alert-warning';
                icon = 'fas fa-exclamation-circle';
                break;
            case 'info':
                alertClass = 'alert-info';
                icon = 'fas fa-info-circle';
                break;
        }
        
        const newAlert = `
            <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                <i class="${icon}"></i>
                <strong>[${timestamp}]</strong> ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        resultsDiv.innerHTML = newAlert + resultsDiv.innerHTML;
        
        // Limitar a los últimos 5 resultados
        const alerts = resultsDiv.querySelectorAll('.alert');
        if (alerts.length > 5) {
            for (let i = 5; i < alerts.length; i++) {
                alerts[i].remove();
            }
        }
    }

    // Copiar al portapapeles
    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(function() {
            showResult('success', 'Valor copiado al portapapeles');
        }).catch(function() {
            showResult('error', 'Error al copiar al portapapeles');
        });
    }
</script>
} 