#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Script para configurar el entorno de desarrollo local de la aplicaci√≥n segura .NET 9
.DESCRIPTION
    Este script configura certificados de desarrollo, variables de entorno y dependencias necesarias
    para ejecutar la aplicaci√≥n localmente.
.EXAMPLE
    .\setup-local-dev.ps1
#>

param(
    [switch]$SkipCertificates = $false,
    [switch]$SkipDotnetTools = $false
)

Write-Host "üöÄ Configurando entorno de desarrollo local para Aplicaci√≥n Segura .NET 9" -ForegroundColor Green

# Verificar que estamos en el directorio correcto
if (-not (Test-Path "SecureAppSolution.sln")) {
    Write-Host "‚ùå Por favor ejecuta este script desde el directorio ra√≠z del proyecto" -ForegroundColor Red
    exit 1
}

# Verificar .NET 9 SDK
Write-Host "üîç Verificando .NET 9 SDK..." -ForegroundColor Blue
try {
    $dotnetVersion = dotnet --version
    if ($dotnetVersion -like "9.*") {
        Write-Host "‚úÖ .NET 9 SDK encontrado: $dotnetVersion" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Se encontr√≥ .NET $dotnetVersion, pero se requiere .NET 9" -ForegroundColor Yellow
        Write-Host "üì• Descarga .NET 9 desde: https://dotnet.microsoft.com/download/dotnet/9.0" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå .NET SDK no encontrado. Instala .NET 9 SDK." -ForegroundColor Red
    exit 1
}

# Configurar certificados de desarrollo HTTPS
if (-not $SkipCertificates) {
    Write-Host "üîê Configurando certificados HTTPS de desarrollo..." -ForegroundColor Blue
    try {
        dotnet dev-certs https --clean
        dotnet dev-certs https --trust
        Write-Host "‚úÖ Certificados HTTPS configurados" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è  Error configurando certificados HTTPS: $($_.Exception.Message)" -ForegroundColor Yellow
        Write-Host "   Puedes intentar ejecutar manualmente: dotnet dev-certs https --trust" -ForegroundColor Yellow
    }
}

# Restaurar dependencias de NuGet
Write-Host "üì¶ Restaurando dependencias de NuGet..." -ForegroundColor Blue
try {
    dotnet restore
    Write-Host "‚úÖ Dependencias restauradas exitosamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error restaurando dependencias: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Instalar herramientas de desarrollo globales
if (-not $SkipDotnetTools) {
    Write-Host "üõ†Ô∏è  Instalando herramientas de desarrollo..." -ForegroundColor Blue
    
    $tools = @(
        @{ Name = "dotnet-ef"; Package = "dotnet-ef" },
        @{ Name = "dotnet-aspnet-codegenerator"; Package = "dotnet-aspnet-codegenerator" }
    )
    
    foreach ($tool in $tools) {
        try {
            dotnet tool install --global $tool.Package 2>$null
            Write-Host "‚úÖ Herramienta instalada: $($tool.Name)" -ForegroundColor Green
        } catch {
            Write-Host "‚ÑπÔ∏è  Herramienta ya instalada o error: $($tool.Name)" -ForegroundColor Yellow
        }
    }
}

# Crear directorios necesarios
Write-Host "üìÅ Creando directorios necesarios..." -ForegroundColor Blue
$directories = @(
    "src/SecureApi/logs",
    "src/SecureWebApp/logs",
    "docs",
    "tests"
)

foreach ($dir in $directories) {
    if (-not (Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
        Write-Host "‚úÖ Directorio creado: $dir" -ForegroundColor Green
    }
}

# Configurar gitignore si no existe
if (-not (Test-Path ".gitignore")) {
    Write-Host "üìù Creando archivo .gitignore..." -ForegroundColor Blue
    
    $gitignoreContent = @"
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/
[Ll]ogs/

# Visual Studio
.vs/

# Visual Studio Code
.vscode/

# Application specific
*.Development.json
deployment-config-*.json
logs/
*.log

# Azure and secrets
*.publishsettings
*.azurePubxml

# Key files (NEVER commit these)
*.pfx
*.p12
*.key
*.pem

# Environment variables
.env
.env.local
.env.development
.env.test
.env.production
"@

    $gitignoreContent | Out-File -FilePath ".gitignore" -Encoding UTF8
    Write-Host "‚úÖ Archivo .gitignore creado" -ForegroundColor Green
}

# Crear archivo de configuraci√≥n de desarrollo local
Write-Host "‚öôÔ∏è  Creando configuraci√≥n de desarrollo local..." -ForegroundColor Blue

$devConfigApi = @{
    "AzureAd" = @{
        "Instance" = "https://login.microsoftonline.com/"
        "TenantId" = "tu-tenant-id-aqui"
        "ClientId" = "tu-api-client-id-aqui"
        "ClientSecret" = "tu-api-client-secret-aqui"
        "Audience" = "api://tu-api-client-id-aqui"
    }
    "KeyVault" = @{
        "VaultUrl" = "https://tu-keyvault.vault.azure.net/"
        "ClientId" = "tu-managed-identity-client-id"
    }
    "Security" = @{
        "AllowedOrigins" = @("https://localhost:7001")
    }
    "Serilog" = @{
        "MinimumLevel" = @{
            "Default" = "Debug"
        }
    }
}

$devConfigWeb = @{
    "AzureAd" = @{
        "Instance" = "https://login.microsoftonline.com/"
        "TenantId" = "tu-tenant-id-aqui"
        "ClientId" = "tu-webapp-client-id-aqui"
        "ClientSecret" = "tu-webapp-client-secret-aqui"
    }
    "KeyVault" = @{
        "VaultUrl" = "https://tu-keyvault.vault.azure.net/"
        "ClientId" = "tu-managed-identity-client-id"
    }
    "ApiSettings" = @{
        "BaseUrl" = "https://localhost:7000"
        "ApiScope" = "api://tu-api-client-id-aqui/access_as_user"
    }
    "Serilog" = @{
        "MinimumLevel" = @{
            "Default" = "Debug"
        }
    }
}

# Guardar configuraciones de desarrollo
$devConfigApi | ConvertTo-Json -Depth 10 | Out-File -FilePath "src/SecureApi/appsettings.Development.local.json" -Encoding UTF8
$devConfigWeb | ConvertTo-Json -Depth 10 | Out-File -FilePath "src/SecureWebApp/appsettings.Development.local.json" -Encoding UTF8

Write-Host "‚úÖ Archivos de configuraci√≥n de desarrollo creados" -ForegroundColor Green
Write-Host "   üìù Edita los archivos *appsettings.Development.local.json con tus valores de Azure AD" -ForegroundColor Yellow

# Verificar construcci√≥n del proyecto
Write-Host "üî® Verificando que el proyecto se construye correctamente..." -ForegroundColor Blue
try {
    dotnet build --configuration Debug --no-restore
    Write-Host "‚úÖ Proyecto construido exitosamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error construyendo el proyecto: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   Revisa los errores de compilaci√≥n y dependencias" -ForegroundColor Yellow
}

# Mostrar resumen
Write-Host "`nüéâ ¬°Configuraci√≥n de desarrollo completada!" -ForegroundColor Green
Write-Host "`nüìã Pr√≥ximos pasos:" -ForegroundColor Blue
Write-Host "   1. üîë Configura Azure AD App Registrations" -ForegroundColor White
Write-Host "   2. üìù Actualiza los archivos *appsettings.Development.local.json" -ForegroundColor White
Write-Host "   3. üöÄ Ejecuta las aplicaciones:" -ForegroundColor White
Write-Host "      ‚Ä¢ API: cd src/SecureApi && dotnet run" -ForegroundColor Gray
Write-Host "      ‚Ä¢ Web: cd src/SecureWebApp && dotnet run" -ForegroundColor Gray
Write-Host "   4. üåê Abre https://localhost:7001 en tu navegador" -ForegroundColor White
Write-Host "`nüí° URLs de desarrollo:" -ForegroundColor Blue
Write-Host "   ‚Ä¢ API: https://localhost:7000" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Web App: https://localhost:7001" -ForegroundColor Gray
Write-Host "   ‚Ä¢ Health Check: https://localhost:7000/health" -ForegroundColor Gray

Write-Host "`n‚ú® ¬°Listo para desarrollar de forma segura!" -ForegroundColor Green 