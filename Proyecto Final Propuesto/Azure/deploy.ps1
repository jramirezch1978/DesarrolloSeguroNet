#Requires -Modules Az

param(
    [Parameter(Mandatory = $true)]
    [string]$ResourceGroupName,
    
    [Parameter(Mandatory = $true)]
    [string]$Location,
    
    [Parameter(Mandatory = $true)]
    [ValidateSet('dev', 'test', 'prod')]
    [string]$Environment,
    
    [Parameter(Mandatory = $true)]
    [string]$ProjectName,
    
    [Parameter(Mandatory = $false)]
    [string]$TenantId,
    
    [Parameter(Mandatory = $false)]
    [string]$ApiClientId,
    
    [Parameter(Mandatory = $false)]
    [string]$WebAppClientId
)

# Configuraci√≥n de colores para output
$ErrorActionPreference = "Stop"

Write-Host "üöÄ Iniciando despliegue de la aplicaci√≥n segura .NET 9" -ForegroundColor Green
Write-Host "üìç Grupo de recursos: $ResourceGroupName" -ForegroundColor Yellow
Write-Host "üåç Ubicaci√≥n: $Location" -ForegroundColor Yellow
Write-Host "üèóÔ∏è  Entorno: $Environment" -ForegroundColor Yellow

# Verificar si estamos conectados a Azure
try {
    $context = Get-AzContext
    if (-not $context) {
        throw "No hay contexto de Azure"
    }
    Write-Host "‚úÖ Conectado a Azure con la cuenta: $($context.Account.Id)" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå No est√°s conectado a Azure. Ejecuta 'Connect-AzAccount' primero." -ForegroundColor Red
    exit 1
}

# Obtener informaci√≥n del tenant si no se proporciona
if (-not $TenantId) {
    $TenantId = (Get-AzContext).Tenant.Id
    Write-Host "üîë Usando Tenant ID del contexto actual: $TenantId" -ForegroundColor Yellow
}

# Crear grupo de recursos si no existe
Write-Host "üì¶ Verificando grupo de recursos..." -ForegroundColor Blue
$rg = Get-AzResourceGroup -Name $ResourceGroupName -ErrorAction SilentlyContinue
if (-not $rg) {
    Write-Host "üì¶ Creando grupo de recursos: $ResourceGroupName" -ForegroundColor Yellow
    New-AzResourceGroup -Name $ResourceGroupName -Location $Location
    Write-Host "‚úÖ Grupo de recursos creado exitosamente" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Grupo de recursos ya existe" -ForegroundColor Green
}

# Configurar registro de aplicaciones en Azure AD si no se proporcionan
if (-not $ApiClientId -or -not $WebAppClientId) {
    Write-Host "üîë Configurando aplicaciones de Azure AD..." -ForegroundColor Blue
    
    # Instalar m√≥dulo AzureAD si no est√° disponible
    if (-not (Get-Module -ListAvailable -Name AzureAD)) {
        Write-Host "üì¶ Instalando m√≥dulo AzureAD..." -ForegroundColor Yellow
        Install-Module -Name AzureAD -Force -AllowClobber
    }
    
    try {
        Connect-AzureAD -TenantId $TenantId
        
        if (-not $ApiClientId) {
            # Crear aplicaci√≥n para la API
            Write-Host "üîë Creando aplicaci√≥n de Azure AD para la API..." -ForegroundColor Yellow
            $apiApp = New-AzureADApplication -DisplayName "$ProjectName-$Environment-api" `
                -IdentifierUris "api://$ProjectName-$Environment-api" `
                -ReplyUrls @("https://localhost:7000/signin-oidc")
            
            $ApiClientId = $apiApp.AppId
            Write-Host "‚úÖ API App ID: $ApiClientId" -ForegroundColor Green
        }
        
        if (-not $WebAppClientId) {
            # Crear aplicaci√≥n para la Web App
            Write-Host "üîë Creando aplicaci√≥n de Azure AD para la Web App..." -ForegroundColor Yellow
            $webApp = New-AzureADApplication -DisplayName "$ProjectName-$Environment-webapp" `
                -ReplyUrls @("https://localhost:7001/signin-oidc")
            
            $WebAppClientId = $webApp.AppId
            Write-Host "‚úÖ Web App ID: $WebAppClientId" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "‚ö†Ô∏è  No se pudieron crear las aplicaciones de Azure AD autom√°ticamente." -ForegroundColor Yellow
        Write-Host "‚ö†Ô∏è  Por favor, cr√©alas manualmente y ejecuta el script nuevamente con los par√°metros -ApiClientId y -WebAppClientId" -ForegroundColor Yellow
        Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Par√°metros para el template de Bicep
$templateParameters = @{
    projectName = $ProjectName
    location = $Location
    environment = $Environment
    tenantId = $TenantId
    apiClientId = $ApiClientId
    webAppClientId = $WebAppClientId
}

# Desplegar infraestructura
Write-Host "üèóÔ∏è  Desplegando infraestructura con Bicep..." -ForegroundColor Blue
try {
    $deployment = New-AzResourceGroupDeployment `
        -ResourceGroupName $ResourceGroupName `
        -TemplateFile "main.bicep" `
        -TemplateParameterObject $templateParameters `
        -Verbose

    if ($deployment.ProvisioningState -eq "Succeeded") {
        Write-Host "‚úÖ Infraestructura desplegada exitosamente" -ForegroundColor Green
        
        # Mostrar outputs importantes
        Write-Host "üìã Informaci√≥n del despliegue:" -ForegroundColor Blue
        Write-Host "üîê Key Vault URL: $($deployment.Outputs.keyVaultUrl.Value)" -ForegroundColor Yellow
        Write-Host "üåê API URL: $($deployment.Outputs.apiUrl.Value)" -ForegroundColor Yellow
        Write-Host "üåê Web App URL: $($deployment.Outputs.webAppUrl.Value)" -ForegroundColor Yellow
        Write-Host "üÜî Managed Identity Client ID: $($deployment.Outputs.managedIdentityClientId.Value)" -ForegroundColor Yellow
        
        # Guardar configuraci√≥n en archivo
        $configFile = "deployment-config-$Environment.json"
        $config = @{
            ResourceGroupName = $ResourceGroupName
            Environment = $Environment
            TenantId = $TenantId
            ApiClientId = $ApiClientId
            WebAppClientId = $WebAppClientId
            KeyVaultUrl = $deployment.Outputs.keyVaultUrl.Value
            ApiUrl = $deployment.Outputs.apiUrl.Value
            WebAppUrl = $deployment.Outputs.webAppUrl.Value
            ManagedIdentityClientId = $deployment.Outputs.managedIdentityClientId.Value
            StorageAccountName = $deployment.Outputs.storageAccountName.Value
        }
        
        $config | ConvertTo-Json -Depth 10 | Out-File -FilePath $configFile -Encoding UTF8
        Write-Host "üíæ Configuraci√≥n guardada en: $configFile" -ForegroundColor Green
        
        Write-Host "`nüéâ ¬°Despliegue completado exitosamente!" -ForegroundColor Green
        Write-Host "üìù Pr√≥ximos pasos:" -ForegroundColor Blue
        Write-Host "   1. Actualizar los archivos appsettings.json con la configuraci√≥n generada" -ForegroundColor White
        Write-Host "   2. Configurar secretos en Key Vault" -ForegroundColor White
        Write-Host "   3. Desplegar las aplicaciones a App Service" -ForegroundColor White
        
    } else {
        Write-Host "‚ùå Error en el despliegue: $($deployment.ProvisioningState)" -ForegroundColor Red
        exit 1
    }
}
catch {
    Write-Host "‚ùå Error durante el despliegue: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host "`nüöÄ Proceso de despliegue completado" -ForegroundColor Green 